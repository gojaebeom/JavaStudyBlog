package ch00_자바의기본;

public class Object {
	
/**
 *  @객체란_무엇인가?
	자바는 객체지향 언어이다. 
	그렇다면 객체란 정확히 무엇인가? 사전에 집고 넘어가야할 문제인것 같다.
	
	실생활에서 객체는 물체를 말한다. 
	물체는 우리 주면에서도 많다. 지금 내가 사용하고 있는 노트북, 컴퓨터 그것 뿐만아니라
	피아노, 차 등등 모든것이 물체이다.
	
	소프트웨어에서 말하는 객체의 특징으로는 상태(state)와 동작(action)으로 이루어 져 있다.
	여기서 상태는 필드(fields) 또는 변수(variables) 이고
	동작은 메서드(method) 또는 함수(function)으로 사용된다.
	
	(어느 블로거의 분의 글들을 참고해가며 잘 보고있는데 어떤분은 행동(behavior)으로 설명해주셨다.
	행동과 동작은 비슷한 느낌인것같아 본인이 이해하기 편한대로 action으로 바꾸었다.
	한동안 리액트에 빠져 리액트에서 다루는 dispatch의 영향이 크긴 큰것같다..)
	
	그럼 여기서 변수와 함수가 등장했는데 간단히 알아보자면 
	
	변수 - 변수는 어떠한 값을 담을수있는 틀과도 같다.
	이름에서 알 수 있듯이 할당된 값을 바꾸는 것도 가능하다.
	프로그래밍에서는 프로그램을 만들기위해 사용되어야하는 값들을 이 변수에 할당하여 사용하는 것이다.
	
	함수 - 함수는 변수들을 받아서 가공하고 그에 따른 결과를 반환하는 등의 기능을 한다.
	자바에서는 이부분을 이용하여 객체지향 핵심 원리중 하나인 '캡슐화'를 사용한다.
	자바에서는 접근제한자라는 기능이있는데 자세한건 나중에 다루자, 여튼 이기능을 이용해
	필드변수들에게는 보통 private를 걸어 클래스 외부에선 이 값을 사용하지 못하게 막아놓는다.
	그리고 setter, getter등의 메서드들을 통해 필드변수들을 다루며, 오직 이 메서드들을 통해서만 
	상호작용을 하게끔 하는것이다. 
	
	총 정리하자면 객체는 다음과 같은 이점을 가진다.
	
	모듈화 - 객체를 위한 소스코드는 다른코드와 별도로 코딩되고 유지할 수 있다.
	정보은닉(캡슐화) - 오직 객체의 메서드로만 상호작용을 함으로 객체 내부의 상태들의 정보를 외부로부터 숨길 수 있다.
	코드 재사용 - 누군가 어떠한 객체를 구현하였다면 그 객체를 사용할 수 있다.
	
	
*/

}
