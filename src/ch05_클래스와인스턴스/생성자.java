package ch05_클래스와인스턴스;

public class 생성자 {

    /**
     * @생성자
     * 생성자는 메소드와 모습이 같다. 따라서 생성자를 '생성자 메소드' 로
     * 표현하는 경우도 있다. 그러나 생성자는 다음과 같은 부분에서 메소드와 차이가 있다.
     * 달리 말하면 이는 생성자가 되기 위한 조건이기도 하다.
     * 
     * -생성자의 이름은 클래스의 이름과 동일해야 한다.
     * -생성자는 값을 반환하지 않고 반환형도 표시하지 않는다. 
     * 
     * 위의 조건을 모두 만족하면 이는 자바 컴파일러에 의해서 생성자로 인식된다. 
     * 따라서 인스턴스 생성 시 자동으로 호출되어 인스턴스를 초기화 하게 된다. 
     * 그럼 앞서 예제에서 인스턴스 초기화를 위해 생성자를 만들어보자
     */

     public static void main(String[] args){
         Person person = new Person("고재범", 26);
         person.myInfo();
     }

}

class Person{

    String name;
    int age;

    //생성자
    public Person(String name, int age){
        this.name = name; //this키워드는 class의 인스턴스 변수 자신을 가리킨다. 나중에 더 자세히 다루어보자.
        this.age = age;
    }

    public void myInfo(){
        System.out.println("저의 이름은 " +name+" 입니다.");
        System.out.println("나이는 "+ age +" 입니다.");
    }
}

/**
 * 위의 예제에 생성자를 보면 클래스와 이름이 동일하다. 
 * 그리고 반환하지 않으며 , 반환형도 선언하지 않았다. 
 * 따라서 생성자의 조건을 모두 갖췄다. 
 * 
 * 그리고 인스턴스를 메소드 main에서 생성할때 매개변수로 이름과 나이가 전달이 된다.
 * 즉 위와같이 문장을 구성하면 '인스턴스 생성 마지막 단계' 에서 다음의 생성자가 호출되면서 값들이 전달된다.
 * 그리고 이 값들로 인스턴스 변수가 초기화 된다.
 * 
 * 생성자와 관련하여 다음 사실을 반드시 기억해야 한다.
 * 
 * -인스턴스 생성의 마지막 단계는 생성자 호출이다.
 * -어떠한 이유로든 생성자 호출이 생략된 인스턴스는 인스턴스가 아니다.
 * 
 * @디폴트_생성자(Default Constructor)
 * 인스턴스 생성의 마지막 단계는 생성자 호출이라 하였다. 
 * 그리고 생성자 호출이생략된 인스턴스는 인스턴스가 아니라고 하였다.
 * 하지만 앞서 생성자가 없는 클래스를 수차례 정의하였고 이들을 대상으로 
 * 인스턴스를 생성한 바 있다. 그렇다면 이렇게 생성된 인스턴스는 인스턴스가 아니란 뜻인가?
 * 사실 다음과 같이 생성자를 생략한 상태의 클래스를 정의하면 자바 컴파일러가 '디폴트 생성자'
 * 라는 것을 클래스의 정의에 넣어준다.
 * 
 * class Person{
 *      
 *      //디폴트 생성자
 *      public Person(){
 *       //empty
 *      }
 * }
 * 
 * 위에서 보이듯이, 디폴트 생성자는 인자를 전달받지 않는 형태로 정의되어 삽입된다.
 * 물론 내부적으로 하는 일도 없다. 하지만 이로 인해서 인스턴스의 생성 규칙인 '생성자의 호출'
 * 은 유지가 된다. 생성자를 정의하지 않더라도 말이다.
 * 그런데 컴파일러에 의해서 디폴트 생성자가 삽입이 되더라도 생성자는 직접 정의해주는것이 좋다.
 * 아주 예외적인 상황이 아니라면, 생성자가 필요 없는 클래스는 잘 정의된 클래스가 아닐 확률이 높기 때문이다.
 */

