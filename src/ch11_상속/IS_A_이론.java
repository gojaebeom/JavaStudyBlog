package ch11_상속;

public class IS_A_이론 {

	/**
	 * @상속을_위한_두_클래스의_관계
	 * 두 클래스를 상속의 관계로 맺는 것이 도우이 되는 상황이 있고 도움이 되지 않는 상황이 있다.
	 * 그렇다면 언제 두 클래스를 상속의 관계로 맺어야 할까? 
	 * 기본적으로 IS-A 관계라는 것이 성립해야 상속의 후보로 고려할 수 있다.
	 * 
	 * @상속의_기본_조건인__IS_A_관계
	 * 상속이 갖는 문법적 특성을 통해서 상위 클래스와 하위 클래스를 다음과 같이 이야기할 수 있다.
	 * 
	 * - 하위 클래스는 상위 클래스의 모든 특성을 지닌다. 
	 * - 거기에 더하여 하위 클래스는 자신만의 추가적인 특성을 더하게 된다.
	 * 
	 * 이러한 상속의 특성을 현실 세계에서도 찾아볼 수 있다. 대표적인 예가 다음과 같다.
	 * 
	 * 모바일폰 vs 스마트폰
	 * 
	 * 모바일폰이 상위 클래스라면 스마트폰은 하위 클래스이다. 
	 * 즉 이 둘을 객체지향의 관점에서 보면 
	 * 다음과 같이 이야기할 수 있다. 
	 * 
	 * 모바일폰을 스마트폰이 상속한다.
	 * 
	 * 스마트폰은 모바일폰이 갖는 특성을 모두 갖는다. 게다가 스마트폰은 앱의 설치 및 실행 등 컴퓨터의
	 * 특성을 추가적으로 갖고 있다. 따라서 클래스를 설계한다면 다음과 같은 설계가 논리적으로 타당하다.
	 * 
	 * - class 스마트폰 extends 모바일폰 {...}
	 * 
	 * 그런데 우리는 스마트폰도 모바일폰의 한 종류라 말한다. 즉 컴퓨터의 기능이 추가된 모바일폰이 스마트 폰인 것이다.
	 * 따라서 다음과 같이 이야기할 수 있다. 
	 * 
	 * - 스마트폰도 모바일폰이다.
	 * - 스마트폰은 일종의 모바일폰이다.
	 * 
	 * 그리고 위의 문장들이 나타나는 관계를 가리켜 IS-A 관계라 하고, 이것이 상속의 관계를 맺기 위한
	 * 두 클래스의 기본 조건이 된다. 참고로 is a는 ~은 ~ 이다. 로해석 된다. 예를 들면 다음과 같다.
	 * 
	 * Life is a journey - 인생은 여행이다. 
	 * 
	 * 지금까지 설명한 내용을 정리하면 다음과 같다.
	 * 
	 * @총_정리
	 * - IS - A 관계는 ~은 ~이다. 로 표현되는 관계이다. 
	 * - 상속이 갖는 문법적 특성은 IS - A 관계의 표현에 적합하다.
	 * - 따라서 상속 관계를 형성하기 위한 두 클래스는 IS -A 관계에 있어야 한다.
	 * 
	 * 그럼 지금까지 언급한 모바일폰과 스마트폰의 관계를 코드로 표현해보자.
	 */
}
