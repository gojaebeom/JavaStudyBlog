package ch07_클래스변수와클래스메소드;

public class 클래스변수_초기화 {

	/**
	 * 클래스 변수는 인스턴스의 생성과 상관이 없다고 하였다. 
	 * 그렇다면 클래스 변수는 언제 메모리 공간에 할당되고 초기화될까? 
	 * 이와 관련하여 다음 예제를 보자.
	 */
	
	public static void main(String[] args) {
		InstCnt02.instNum -=15; //인스턴스 생성 없이 instNum에 접근
		System.out.println(InstCnt02.instNum);
	}
}

class InstCnt02{
	static int instNum = 100;
	
	InstCnt02(){
		instNum++;
		System.out.println("인스턴스 생성: "+instNum);
	}
}

/**
 * 위의 예제를 통해서 언급하고 싶은 내용은 다음과 같다.
 * 
 * - 클래스 변수는 인스턴스 생성 이전에 메모리 공간에 존재한다.
 * 
 * 결론을 말하면, 클래스 변수는 해당 클래스 정보가 가상머신에 의해 읽히는 순간 메모리 공간에 할당되고 초기화 된다.
 * 그리고 한 가지 확실한 것은 이러한 할당과 초기화는 위의 예제에서 보이듯이 인스턴스의 생성과 문관하게 이뤄진다는 점이다.
 * 따라서 다음과 같이 생성자를 통한 클래스 변수의 초기화를 진행하지 않도록 주의해야 한다.
 * 
 * class InstCnt{
 * 		static int instNum =100; //클래스 변수의 정상적인 초기화 방법
 * 
 * 		InstCnt(){
 * 			instNum = 0;// 클래스 변수의 초기화가 아니다!
 *      }  
 * }
 * 
 * 위의 클래스 변수 instNum 은 100으로 초기화 된다. 클래스 정보가 가상머신에 의해 읽히는 순간 100으로 초기화된다.
 * 그런데 생성자에서 변수 instNum을 0으로 다시 초기화 한다. 따라서 인스턴스가 
 * 생성될 때마다 instNum은 매번 그 값이 0으로 바뀌게 된다.
 * 
 * @클래스로딩
 * 앞서 설명에서 클래스 정보를 가상머신이 읽는다 는 표현을 썼는데, 이렇듯 가상머신이 특정 클래스 정보를 
 * 읽는 행위를 가리켜 클래스 로딩 이라 한다. 그리고 특정 클래스의 인스턴스 생성을 
 * 위해서는 해당 클래스가 반드시 가상머신에 의해 로딩되어야 한다. 즉 인스턴스 생성보다 클래스 로딩이 먼저이다.
 */
